import java.util.Comparator;

public class Arrays {

    /**
     * Выполняет поиск указанного значения в заданном массиве байтов с помощью алгоритма двоичного поиска.
     * Перед выполнением этого вызова массив должен быть отсортирован в порядке возрастания. Если он не отсортирован,
     * результаты не определены. Если в массиве есть несколько элементов с указанным значением,
     * нет гарантии, что будет найден именно он.
     *
     * @param a   массив, в котором выполняется поиск
     * @param key значение, которое нужно найти
     * @return индекс ключа поиска, если он содержится в массиве; в противном случае — (-(точка вставки) — 1).
     * Точка вставки определяется как точка, в которую
     * ключ будет вставлен в массив: индекс первого элемента, превышающего
     * ключ, или a.length, если все элементы в массиве меньше указанного ключа.
     */
    public static int binarySearch(byte[] a, byte key) {
        return binarySearch(a, 0, a.length, key);
    }

    /**
     * Выполняет двоичный поиск в указанном фрагменте байтового массива для поиска указанного ключа.
     * Перед выполнением этого вызова массив должен быть отсортирован в порядке возрастания. Если он не отсортирован,
     * результаты не определены. Если массив содержит несколько элементов с указанным значением,
     * нет гарантии, что будет найден именно этот элемент.
     *
     * @param a         массив, в котором выполняется поиск
     * @param fromIndex индекс первого элемента (включительно), подлежащего поиску
     * @param toIndex   индекс последнего элемента (эксклюзивного), подлежащего поиску
     * @param key       значение, которое нужно найти
     * @return индекс ключа поиска, если он содержится в массиве; в противном случае <code>(-(точка вставки) - 1)</code>.
     * Точка вставки определяется как точка, в которую ключ будет вставлен в массив: индекс первого элемента, превышающего
     * ключ, или <code>a.length</code>, если все элементы в массиве меньше указанного ключа.
     */
    public static int binarySearch(byte[] a, int fromIndex, int toIndex, byte key) {
        int low = fromIndex;
        int high = toIndex - 1;

        while (low <= high) {
            int mid = (low + high) >>> 1;
            byte midVal = a[mid];

            if (midVal < key) {
                low = mid + 1;
            } else if (midVal > key) {
                high = mid - 1;
            } else {
                return mid;
            }
        }
        return -(low + 1);
    }

    /**
     * Выполняет поиск указанного значения в заданном массиве символов с помощью алгоритма двоичного поиска.
     * Перед выполнением этого вызова массив должен быть отсортирован в порядке возрастания. Если он не отсортирован,
     * результаты не определены. Если массив содержит несколько элементов с указанным значением,
     * нет гарантии, что будет найден именно этот элемент.
     *
     * @param a   массив, в котором выполняется поиск
     * @param key значение, которое нужно найти
     * @return индекс ключа поиска, если он содержится в массиве; в противном случае — (-(точка вставки) — 1).
     * Точка вставки определяется как точка, в которую
     * ключ будет вставлен в массив: индекс первого элемента, превышающего
     * ключ, или a.length, если все элементы в массиве меньше указанного ключа.
     */
    public static int binarySearch(char[] a, char key) {
        return binarySearch(a, 0, a.length, key);
    }

    /**
     * Выполняет двоичный поиск в указанном фрагменте массива символов для поиска указанного ключа.
     * Перед выполнением этого вызова массив должен быть отсортирован в порядке возрастания. Если он не отсортирован,
     * результаты не определены. Если массив содержит несколько элементов с указанным значением,
     * нет гарантии, что будет найден именно этот элемент.
     *
     * @param a         массив, в котором выполняется поиск
     * @param fromIndex индекс первого элемента (включительно), подлежащего поиску
     * @param toIndex   индекс последнего элемента (эксклюзивного), подлежащего поиску
     * @param key       значение, которое нужно найти
     * @return индекс ключа поиска, если он содержится в массиве; в противном случае — (-(точка вставки) — 1).
     * Точка вставки определяется как точка, в которую
     * ключ будет вставлен в массив: индекс первого элемента, превышающего
     * ключ, или a.length, если все элементы в массиве меньше указанного ключа.
     */
    public static int binarySearch(char[] a, int fromIndex, int toIndex, char key) {
        int low = fromIndex;
        int high = toIndex - 1;

        while (low <= high) {
            int mid = (low + high) >>> 1;
            char midVal = a[mid];

            if (midVal < key) {
                low = mid + 1;
            } else if (midVal > key) {
                high = mid - 1;
            } else {
                return mid;
            }
        }
        return -(low + 1);
    }

    /**
     * Выполняет поиск указанного значения в указанном массиве чисел с плавающей запятой с помощью алгоритма двоичного поиска.
     * Перед выполнением этого вызова массив должен быть отсортирован в порядке возрастания. Если он не отсортирован,
     * результаты не определены. Если в массиве есть несколько элементов с указанным значением,
     * нет гарантии, что будет найден именно этот элемент.
     *
     * @param a   массив, в котором выполняется поиск
     * @param key значение, которое нужно найти
     * @return индекс ключа поиска, если он содержится в массиве; в противном случае — (-(точка вставки) — 1).
     * Точка вставки определяется как точка, в которую
     * ключ будет вставлен в массив: индекс первого элемента, превышающего
     * ключ, или a.length, если все элементы в массиве меньше указанного ключа.
     */
    public static int binarySearch(double[] a, double key) {
        return binarySearch(a, 0, a.length, key);
    }

    /**
     * Выполняет двоичный поиск в указанном массиве двойных чисел, чтобы найти указанный ключ.
     * Перед выполнением этого вызова массив должен быть отсортирован в порядке возрастания. Если он не отсортирован,
     * результаты не определены. Если в массиве есть несколько элементов с указанным значением,
     * нет гарантии, что будет найден именно этот элемент.
     *
     * @param a         массив, в котором выполняется поиск
     * @param fromIndex индекс первого элемента (включительно), подлежащего поиску
     * @param toIndex   индекс последнего элемента (эксклюзивного), подлежащего поиску
     * @param key       значение, которое нужно найти
     * @return индекс ключа поиска, если он содержится в массиве; в противном случае — (-(точка вставки) — 1).
     * Точка вставки определяется как точка, в которую
     * ключ будет вставлен в массив: индекс первого элемента, превышающего
     * ключ, или a.length, если все элементы в массиве меньше указанного ключа.
     */
    public static int binarySearch(double[] a, int fromIndex, int toIndex, double key) {
        int low = fromIndex;
        int high = toIndex - 1;

        while (low <= high) {
            int mid = (low + high) >>> 1;
            double midVal = a[mid];

            if (midVal < key) {
                low = mid + 1;
            } else if (midVal > key) {
                high = mid - 1;
            } else {
                return mid;
            }
        }
        return -(low + 1);
    }

    /**
     * Выполняет поиск указанного значения в заданном массиве с плавающей запятой с помощью алгоритма двоичного поиска.
     * Перед выполнением этого вызова массив должен быть отсортирован в порядке возрастания. Если он не отсортирован,
     * результаты будут неопределёнными. Если в массиве есть несколько элементов с указанным значением,
     * нет гарантии, что будет найден именно этот элемент.
     *
     * @param a   массив, в котором выполняется поиск
     * @param key значение, которое нужно найти
     * @return индекс ключа поиска, если он содержится в массиве; в противном случае — (-(точка вставки) — 1).
     * Точка вставки определяется как точка, в которую
     * ключ будет вставлен в массив: индекс первого элемента, превышающего
     * ключ, или a.length, если все элементы в массиве меньше указанного ключа.
     */
    public static int binarySearch(float[] a, float key) {
        return binarySearch(a, 0, a.length, key);
    }

    /**
     * Выполняет двоичный поиск в указанном массиве чисел с плавающей запятой, чтобы найти указанный ключ.
     * Перед выполнением этого вызова массив должен быть отсортирован в порядке возрастания. Если он не отсортирован,
     * результаты будут неопределёнными. Если в массиве есть несколько элементов с указанным значением,
     * нет гарантии, что будет найден именно этот элемент.
     *
     * @param a         массив, в котором выполняется поиск
     * @param fromIndex индекс первого элемента (включительно), подлежащего поиску
     * @param toIndex   индекс последнего элемента (эксклюзивного), подлежащего поиску
     * @param key       значение, которое нужно найти
     * @return индекс ключа поиска, если он содержится в массиве; в противном случае — (-(точка вставки) — 1).
     * Точка вставки определяется как точка, в которую
     * ключ будет вставлен в массив: индекс первого элемента, превышающего
     * ключ, или a.length, если все элементы в массиве меньше указанного ключа.
     */
    public static int binarySearch(float[] a, int fromIndex, int toIndex, float key) {
        int low = fromIndex;
        int high = toIndex - 1;

        while (low <= high) {
            int mid = (low + high) >>> 1;
            float midVal = a[mid];

            if (midVal < key) {
                low = mid + 1;
            } else if (midVal > key) {
                high = mid - 1;
            } else {
                return mid;
            }
        }
        return -(low + 1);
    }

    /**
     * Выполняет поиск указанного значения в заданном массиве целых чисел с помощью алгоритма двоичного поиска.
     * Перед выполнением этого вызова массив должен быть отсортирован в порядке возрастания. Если он не отсортирован,
     * результаты будут неопределёнными. Если в массиве есть несколько элементов с указанным значением,
     * нет гарантии, что будет найден именно этот элемент.
     *
     * @param a   массив, в котором выполняется поиск
     * @param key значение, которое нужно найти
     * @return индекс ключа поиска, если он содержится в массиве; в противном случае — (-(точка вставки) — 1).
     * Точка вставки определяется как точка, в которую
     * ключ будет вставлен в массив: индекс первого элемента, превышающего
     * ключ, или a.length, если все элементы в массиве меньше указанного ключа.
     */
    public static int binarySearch(int[] a, int key) {
        return binarySearch(a, 0, a.length, key);
    }

    public static int binarySearch(int[] a, int fromIndex, int toIndex, int key) {
        int low = fromIndex;
        int high = toIndex - 1;

        while (low <= high) {
            int mid = (low + high) >>> 1;
            int midVal = a[mid];

            if (midVal < key) {
                low = mid + 1;
            } else if (midVal > key) {
                high = mid - 1;
            } else {
                return mid;
            }
        }
        return -(low + 1);
    }

    /**
     * Поиск указанного ключа в заданном отсортированном массиве с помощью алгоритма двоичного поиска.
     * Этот метод предполагает, что массив отсортирован в порядке возрастания.
     *
     * @param a   the array of long values to be searched
     * @param key значение, которое нужно найти
     * @return индекс ключа, если он найден в массиве; в противном случае отрицательное значение, указывающее
     * точку вставки, в которую будет вставлен ключ для сохранения отсортированного порядка
     */
    public static int binarySearch(long[] a, long key) {
        return binarySearch(a, 0, a.length, key);
    }

    /**
     * Выполняет поиск указанного значения в указанном массиве с помощью алгоритма двоичного поиска.
     * Перед выполнением этого вызова массив должен быть отсортирован.
     *
     * @param a         массив, в котором выполняется поиск
     * @param fromIndex индекс первого элемента (включительно), подлежащего поиску
     * @param toIndex   индекс последнего элемента (эксклюзивного), подлежащего поиску
     * @param key       значение, которое нужно найти
     * @return индекс ключа поиска, если он содержится в массиве; в противном случае —
     * (-(точка вставки) - 1). Точка вставки определяется как точка, в которую
     * ключ будет вставлен в массив: индекс первого элемента,
     * превышающего ключ, или toIndex, если все элементы в массиве меньше ключа.
     */
    public static int binarySearch(long[] a, int fromIndex, int toIndex, long key) {
        int low = fromIndex;
        int high = toIndex - 1;

        while (low <= high) {
            int mid = (low + high) >>> 1;
            long midVal = a[mid];

            if (midVal < key) {
                low = mid + 1;
            } else if (midVal > key) {
                high = mid - 1;
            } else {
                return mid;
            }
        }
        return -(low + 1);
    }

    /**
     * Выполняет двоичный поиск в указанном массиве шорт, чтобы найти индекс заданного ключа.
     * Перед выполнением этого вызова массив должен быть отсортирован в порядке возрастания. Если он не отсортирован,
     * результаты будут неопределёнными.
     *
     * @param a   the array of shorts to search
     * @param key the value to search for
     * @return индекс ключа, если он найден в массиве; в противном случае отрицательное значение
     * указывающее точку вставки, в которую будет помещён ключ
     */
    public static int binarySearch(short[] a, short key) {
        return binarySearch(a, 0, a.length, key);
    }

    /**
     * Выполняет двоичный поиск в указанном диапазоне заданного массива для поиска указанного ключа.
     * Перед выполнением этого вызова массив должен быть отсортирован в порядке возрастания. Если он не отсортирован,
     * результаты будут неопределёнными. Этот метод работает за логарифмическое время.
     *
     * @param a         массив, в котором выполняется поиск
     * @param fromIndex индекс первого элемента (включительно), подлежащего поиску
     * @param toIndex   индекс последнего элемента (эксклюзивного), подлежащего поиску
     * @param key       значение, которое нужно найти
     * @return индекс ключа, если он найден в массиве, или
     * -(точка вставки + 1), если ключ не найден, где точка вставки — это индекс
     * в который нужно вставить ключ, чтобы сохранить отсортированный порядок
     */
    public static int binarySearch(short[] a, int fromIndex, int toIndex, short key) {
        int low = fromIndex;
        int high = toIndex - 1;

        while (low <= high) {
            int mid = (low + high) >>> 1;
            short midVal = a[mid];

            if (midVal < key) {
                low = mid + 1;
            } else if (midVal > key) {
                high = mid - 1;
            } else {
                return mid;
            }
        }
        return -(low + 1);
    }

    /**
     * Выполняет двоичный поиск в заданной части массива, чтобы найти позицию
     * заданного ключа с помощью компаратора для сравнения по порядку.
     *
     * @param <T> the type of elements in the array
     * @param a   массив, в котором выполняется поиск
     * @param key the value to search for
     * @param c   the comparator used to compare array elements
     * @return индекс ключа поиска, если он содержится в массиве; в противном случае
     * (-(точка вставки) - 1), где точка вставки — это позиция,
     * в которую ключ будет вставлен в массив.
     */
    public static <T> int binarySearch(T[] a, T key, Comparator<? super T> c) {
        return binarySearch(a, 0, a.length, key, c);
    }

    /**
     * Выполняет двоичный поиск в части заданного массива, чтобы найти индекс указанного ключа.
     * Перед вызовом этого метода массив должен быть отсортирован в порядке возрастания в соответствии с указанным компаратором.
     * Если массив не отсортирован, результаты будут неопределёнными.
     *
     * @param <T>       the type of elements in the array
     * @param a         массив, в котором выполняется поиск
     * @param fromIndex индекс первого элемента (включительно), подлежащего поиску
     * @param toIndex   индекс последнего элемента (эксклюзивного), подлежащего поиску
     * @param key       значение, которое нужно найти
     * @param c         the comparator used to compare array elements
     * @return индекс ключа поиска, если он содержится в массиве в пределах указанного диапазона;
     * в противном случае <tt>(-(точка вставки) - 1)</tt>. Точка вставки определяется как точка,
     * в которой ключ будет вставлен в массив: индекс первого элемента,
     * большего, чем ключ, или <tt>toIndex</tt>, если все элементы в диапазоне меньше указанного ключа.
     */
    public static <T> int binarySearch(T[] a, int fromIndex, int toIndex, T key, Comparator<? super T> c) {
        int low = fromIndex;
        int high = toIndex - 1;

        while (low <= high) {
            int mid = (low + high) >>> 1;
            T midVal = a[mid];
            int cmp = c.compare(midVal, key);

            if (cmp < 0) {
                low = mid + 1;
            } else if (cmp > 0) {
                high = mid - 1;
            } else {
                return mid;
            }
        }
        return -(low + 1);
    }

}
